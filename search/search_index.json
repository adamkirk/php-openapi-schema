{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This package aims to be an OOP representation of an Open API schema for php, to help build schemas programmatically. Take a look at the example below to get a quick idea of how this can be used to build API specs in PHP.</p> Example PHP CodeJSON schema PHP<pre><code>use OpenApiSchema\\Document;\nuse OpenApiSchema\\Server\\Server;\nuse OpenApiSchema\\Operations\\Schema;\nuse OpenApiSchema\\Operations\\PathItem;\nuse OpenApiSchema\\Operations\\Response;\nuse OpenApiSchema\\Operations\\MediaType;\nuse OpenApiSchema\\Operations\\Operation;\nuse OpenApiSchema\\Operations\\Parameter;\nuse OpenApiSchema\\Spec\\MarshallingContext;\nuse OpenApiSchema\\Operations\\RequestBody;\n\n$doc = new Document;\n\n$doc-&gt;setOpenapi('3.1.0')\n    -&gt;setInfo(\n        (new Info())\n            -&gt;setTitle(\"Example API\")\n            -&gt;setDescription(\"An example API using the OpenApiSchema components\")\n            -&gt;setVersion(\"1.0.0\")\n            -&gt;setSummary(\"A very basic API\"),\n    )\n    -&gt;addServers(\n        (new Server())-&gt;setUrl(\"/api/v1\"),\n    )\n    -&gt;addPathItem(\n        \"/v1/resource/{id}\",\n        (new PathItem())\n            -&gt;setPut(\n                (new Operation())\n                    -&gt;setSummary(\"Update a resource\")\n                    -&gt;setDescription(\"Update a resource by Id.\")\n                    -&gt;addParameters(\n                        (new Parameter())\n                            -&gt;setName(\"id\")\n                            -&gt;isRequired()\n                            -&gt;setIn(\"path\")\n                            -&gt;setSchema(\n                                (new Schema())-&gt;setType(\"integer\"),\n                            ),\n                    )\n                    -&gt;addResponse(\n                        \"200\",\n                        (new Response())\n                            -&gt;setDescription(\"Successful operation\")\n                            -&gt;addMediaType(\n                                \"application/json\",\n                                (new MediaType())\n                                    -&gt;setSchema(\n                                        (new Schema())\n                                            -&gt;addProperty(\n                                                \"id\",\n                                                (new Schema())-&gt;setType(\"integer\"),\n                                            )\n                                            -&gt;addProperty(\n                                                \"name\",\n                                                (new Schema())-&gt;setType(\"string\"),\n                                            ),\n                                    ),\n                            ),\n                    )\n                    -&gt;addResponse(\"404\", (new Response())-&gt;setDescription(\"resource not found\"))\n                    -&gt;setRequestBody(\n                        (new RequestBody())\n                            -&gt;isRequired()\n                            -&gt;setDescription(\"Resource data structure\")\n                            -&gt;addMediaType(\n                                \"application/json\",\n                                (new MediaType())\n                                    -&gt;setSchema(\n                                        (new Schema())\n                                            -&gt;addProperty(\n                                                \"name\",\n                                                (new Schema())-&gt;setType(\"string\"),\n                                            ),\n                                    ),\n                            ),\n                    ),\n            ),\n    );\n\n$json = $doc-&gt;toJson(new MarshallingContext);\n</code></pre> JSON<pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"Example API\",\n        \"summary\": \"A very basic API\",\n        \"description\": \"An example API using the OpenApiSchema components\",\n        \"version\": \"1.0.0\"\n    },\n    \"servers\": [\n        {\n            \"url\": \"/api/v1\"\n        }\n    ],\n    \"paths\": {\n        \"/v1/resource/{id}\": {\n            \"put\": {\n                \"summary\": \"Update a resource\",\n                \"description\": \"Update a resource by Id.\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"description\": \"Resource data structure\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"properties\": {\n                                    \"name\": {\n                                        \"type\": \"string\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"required\": true\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Successful operation\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"id\": {\n                                            \"type\": \"integer\"\n                                        },\n                                        \"name\": {\n                                            \"type\": \"string\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"resource not found\"\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {}\n}   \n</code></pre>"},{"location":"about/","title":"About","text":"<ul> <li>User Guide</li> <li>Limitations of this library</li> </ul> <p>&lt; Back</p>"},{"location":"about/limitations/","title":"Limitations","text":"<p>This library is intentionally very basic, and doesn't support a lot of potentially useful functionality.</p>"},{"location":"about/limitations/#php-versions","title":"PHP Versions","text":"<p>It supports PHP <code>&gt;= 8.0</code> (also in <code>composer.json</code>). I wanted to support earlier versions, but due to how I use static return types for some of the abstract classes, it was not really do-able to go any lower (without sacrificing some type-safety which is handy).</p>"},{"location":"about/limitations/#open-api-schema-versions","title":"Open API Schema versions","text":"<p>Currently this is only tested with OpenAPI Specification 3.1.0. I think it may be possible to use it in it's current state to support other versions, by using custom attributes very liberally.</p>"},{"location":"about/limitations/#validation","title":"Validation","text":"<p>This library doesn't perform any validation of the spec itself; either as you build (i.e. <code>setPathItem(...)</code>) or at the point of marshalling the document. The choice was to keep this very simple and allow this to happen at another layer in the stack. Rather than perform validation at the point of object instantiation/modification it seems to make more sense to let the user build this however they like and if it's invalid at stages throughout the process that's fine. But by the end the entire document van be validated against a json schmea using something like opi/json-schema.</p>"},{"location":"about/limitations/#generating-schemas-automatically","title":"Generating schemas automatically","text":"<p>This library is supposed just be the building block, it doesn't automatically build schemas from framework routers, annotations, attributes etc. It can be used by such generators to build the underlying data structures they need.</p> <p>This was the prime motivation for building this, as I wanted to build a library to generate api schemas from code.</p> <p>&lt; Back</p>"},{"location":"about/user_guide/","title":"User Guide","text":"<p>How to use this library?</p>"},{"location":"about/user_guide/#quickstart","title":"Quickstart","text":"<p>...</p>"},{"location":"about/user_guide/#building-a-spec","title":"Building a spec","text":"<p>We won't go through every option here, as the library is pretty uniform, once you can configure a few basic properties you can use the Reference to figure out how the spec can be composed.</p> Show JSON <p>At any point during this guide you can run <code>$doc-&gt;toJson()</code> to get the spec in a JSON format. You can paste that into the Swagger editor for a quick way to visualise it.</p> <p>You may get some validation errors until step 3, but after that this should be a valid spec.</p> <p>All the setters in the library are fluent, which can make it pretty convenient to build things in less lines. You can also opt not to use this, we'll highlight this in the first couple of sections, but then we'll use the fluent setters for the rest. Largely this is just preference, but the fluency can be pretty handy to avoid extra lines of code and intermediary variables.</p>"},{"location":"about/user_guide/#1-setup-document","title":"1. Setup document","text":"<p>Firstly we'll setup the document and define the openapi schema version it's using.</p> <p>Example</p> Fluent settersWithout using Fluent setters PHP<pre><code>use OpenApiSchema as OA;\n$doc = (new OA\\Document)-&gt;setOpenapi(\"3.1.0\"); // JSON path `.openapi`\n</code></pre> PHP<pre><code>use OpenApiSchema as OA;\n$doc = new OA\\Document;\n$doc-&gt;setOpenapi(\"3.1.0\"); // JSON path `.openapi`\n</code></pre>"},{"location":"about/user_guide/#2-set-some-meta-info","title":"2. Set some meta info","text":"<p>We'll set the title, description, and version for the API. This is done via the <code>Meta\\Info</code> class, which we can then set on the document.</p> <p>Example</p> Fluent settersWithout using Fluent setters PHP<pre><code>$doc-&gt;setInfo(\n    (new OA\\Meta\\Info)\n        -&gt;setVersion(\"1.0.0\") // JSON path `.info.version`\n        -&gt;setTitle(\"My API\") // JSON path `.info.title`\n        -&gt;setDescription(\"An API that does things\") // JSON path `.info.description`\n);\n</code></pre> PHP<pre><code>$info = new OA\\Meta\\Info;\n$info-&gt;setVersion(\"1.0.0\"); // JSON path `.info.version`\n$info-&gt;setTitle(\"My API\"); // JSON path `.info.title`\n$info-&gt;setDescription(\"An API that does things\"); // JSON path `.info.description`\n\n$doc-&gt;setInfo($info); // set the info object on the document \n</code></pre>"},{"location":"about/user_guide/#3-add-a-list-endpoint","title":"3. Add a list endpoint","text":"<p>Typically the core thing within an OpenApi Spec, we'll add a path item with a single operation.</p> <p>Example</p> PHP<pre><code>$doc-&gt;addPathItem(\n    \"/api/v1/users\",\n    (new OA\\Operations\\PathItem()) // JSON path `.paths[/api/v1/users]`\n        -&gt;setGet(\n            (new OA\\Operations\\Operation()) // JSON path `.paths[/api/v1/users].get`\n                -&gt;setSummary(\"list users\") // JSON path `.paths[/api/v1/users].get.summary`\n                -&gt;addParameters(\n                    (new OA\\Operations\\Parameter()) // JSON path `.paths[/api/v1/users].get.parameters[0]`\n                        -&gt;setIn(\"query\") // JSON path `.paths[/api/v1/users].get.parameters[0].in`\n                        -&gt;setName(\"page\") // JSON path `.paths[/api/v1/users].get.parameters[0].name`\n                        -&gt;setSchema( // JSON path `.paths[/api/v1/users].get.parameters[0].schema`\n                            (new OA\\Operations\\Schema())-&gt;setType(\"integer\"), // JSON path `.paths[/api/v1/users].get.parameters[0].schema.type`\n                        ),\n                    (new OA\\Operations\\Parameter()) // JSON path `.paths[/api/v1/users].get.parameters[1]`\n                        -&gt;setIn(\"query\")  // JSON path `.paths[/api/v1/users].get.parameters[1].in`\n                        -&gt;setName(\"page_size\") // JSON path `.paths[/api/v1/users].get.parameters[1].name`\n                        -&gt;setSchema(  // JSON path `.paths[/api/v1/users].get.parameters[1].schema`\n                            (new OA\\Operations\\Schema())-&gt;setType(\"integer\"),  // JSON path `.paths[/api/v1/users].get.parameters[1].schema.type`\n                        ),\n                )\n                -&gt;addResponse(\n                    \"400\", // JSON path `.paths[/api/v1/users].get.responses[400]`\n                    (new OA\\Operations\\Response) // JSON path `.paths[/api/v1/users].get.responses[400]`\n                        -&gt;setDescription(\"One of the query parameters was invalid\") // JSON path `.paths[/api/v1/users].get.responses[400].description`\n                )\n                -&gt;addResponse(\n                    \"200\", // JSON path `.paths[/api/v1/users].get.responses[200]`\n                    (new OA\\Operations\\Response())\n                        -&gt;setDescription(\"A list of users\") // JSON path `.paths[/api/v1/users].get.responses[200].description`\n                        -&gt;addMediaType( \n                            \"application/json\", // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json]`\n                            (new OA\\Operations\\MediaType())\n                                -&gt;setSchema( // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema`\n                                    (new OA\\Operations\\Schema())\n                                        -&gt;setItems( // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema.items`\n                                            (new OA\\Operations\\Schema())\n                                                -&gt;addProperty(\n                                                    \"id\", // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema.items.properties.id`\n                                                    (new OA\\Operations\\Schema())\n                                                        -&gt;setType(\"integer\") // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema.items.properties.id.type`\n                                                ) \n                                                -&gt;addProperty(\n                                                    \"name\", // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema.items.properties.name`\n                                                    (new OA\\Operations\\Schema())\n                                                        -&gt;setType(\"string\") // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema.items.properties.name.type`\n                                                )\n                                                -&gt;addProperty(\n                                                    \"email\",  // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema.items.properties.email`\n                                                    (new OA\\Operations\\Schema())\n                                                        -&gt;setType(\"string\")  // JSON path `.paths[/api/v1/users].get.responses[200].content[application/json].schema.items.properties.email.type`\n                                                ),\n                                        ),\n                                ),\n                        ),\n                ),\n        ),\n);\n</code></pre>"},{"location":"about/user_guide/#4-add-a-component","title":"4. Add a component","text":"<p>It's a little tedious building out the same spec each time so we'll add a component for our <code>user</code> object.</p> <p>Example</p> PHP<pre><code>    $doc-&gt;setComponents( // JSON path `.components`\n        (new OA\\Components\\Components)\n            -&gt;addSchema(\n                \"user\",  // JSON path `.components.schemas.user`\n                (new OA\\Operations\\Schema)\n                    -&gt;addProperty(\n                        \"id\",  // JSON path `.components.schemas.user.properties.id`\n                        (new OA\\Operations\\Schema)\n                            -&gt;setType(\"integer\") // JSON path `.components.schemas.user.properties.id.type`\n                            -&gt;setExclusiveMinimum(0) // JSON path `.components.schemas.user.properties.id.exclusiveMinimum`\n                    )\n                    -&gt;addProperty(\n                        \"name\", // JSON path `.components.schemas.user.properties.name`\n                        (new OA\\Operations\\Schema)\n                            -&gt;setType(\"string\") // JSON path `.components.schemas.user.properties.name.type`\n                    )\n                    -&gt;addProperty(\n                        \"email\", // JSON path `.components.schemas.user.properties.email`\n                        (new OA\\Operations\\Schema)\n                            -&gt;setType(\"string\") // JSON path `.components.schemas.user.properties.email.type`\n                    )\n            )\n    );\n</code></pre>"},{"location":"about/user_guide/#5-add-getputdelete-user","title":"5. Add GET/PUT/DELETE user","text":"<p>Now we'll add some another path item with 3 operations, to handle retrieving, creating and deleting users.</p> <p>Example</p> PHP<pre><code>$doc-&gt;addPathItem(\n    \"/api/v1/users/{id}\", // JSON path `.paths[/api/v1/users/{id}]`\n    (new OA\\Operations\\PathItem)\n        -&gt;addParameters(\n            (new OA\\Operations\\Parameter) // JSON path `.paths[/api/v1/users/{id}].parameters[0]`\n                -&gt;setName(\"id\") // JSON path `.paths[/api/v1/users/{id}].parameters[0].name`\n                -&gt;setIn(\"path\") // JSON path `.paths[/api/v1/users/{id}].parameters[0].in`\n                -&gt;isRequired() // JSON path `.paths[/api/v1/users/{id}].parameters[0].required`\n                -&gt;setSchema(\n                    (new OA\\Operations\\Schema) // JSON path `.paths[/api/v1/users/{id}].parameters[0].schema`\n                        -&gt;setType(\"integer\") // JSON path `.paths[/api/v1/users/{id}].parameters[0].schema.type`\n                )\n        )\n        -&gt;setGet(\n            (new OA\\Operations\\Operation) // JSON path `.paths[/api/v1/users/{id}].get`\n                -&gt;setDescription(\"Get a user\") // JSON path `.paths[/api/v1/users/{id}].get.description`\n                -&gt;addResponse(\n                    \"200\", // JSON path `.paths[/api/v1/users/{id}].get.responses[200]`\n                    (new OA\\Operations\\Response)\n                        -&gt;setDescription(\"The user.\") // JSON path `.paths[/api/v1/users/{id}].get.responses[200].description`\n                        -&gt;addMediaType(\n                            \"application/json\",  // JSON path `.paths[/api/v1/users/{id}].get.responses[200].content[application/json]`\n                            (new OA\\Operations\\MediaType)\n                                -&gt;setSchema(\n                                    (new OA\\Operations\\Schema) // JSON path `.paths[/api/v1/users/{id}].get.responses[200].content[application/json].schema`\n                                        -&gt;setRef(\"#/components/schemas/user\") // JSON path `.paths[/api/v1/users/{id}].get.responses[200].content[application/json].schema.$ref`\n                                )\n                        )\n                )\n        )\n        -&gt;setPut(\n            (new OA\\Operations\\Operation) // JSON path `.paths[/api/v1/users/{id}].put`\n                -&gt;setDescription(\"Get a user\") // JSON path `.paths[/api/v1/users/{id}].put.description`\n                -&gt;setRequestBody(\n                    (new OA\\Operations\\RequestBody) // JSON path `.paths[/api/v1/users/{id}].put.requestBody`\n                        -&gt;addMediaType(\n                            \"application/json\", // JSON path `.paths[/api/v1/users/{id}].put.requestBody.content[application/json]`\n                            (new OA\\Operations\\MediaType)\n                                -&gt;setSchema(\n                                    (new OA\\Operations\\Schema)  // JSON path `.paths[/api/v1/users/{id}].put.requestBody.content[application/json].schema`\n                                        -&gt;addProperty(\n                                            \"name\",  // JSON path `.paths[/api/v1/users/{id}].put.requestBody.content[application/json].schema.properties.name`\n                                            (new OA\\Operations\\Schema)\n                                                -&gt;setType(\"string\"), // JSON path `.paths[/api/v1/users/{id}].put.requestBody.content[application/json].schema.properties.name.type`\n                                        )\n                                        -&gt;addProperty(\n                                            \"email\", // JSON path `.paths[/api/v1/users/{id}].put.requestBody.content[application/json].schema.properties.email`\n                                            (new OA\\Operations\\Schema)\n                                                -&gt;setType(\"string\"), // JSON path `.paths[/api/v1/users/{id}].put.requestBody.content[application/json].schema.properties.email.type`\n                                        )\n                                )\n                        )\n                )\n                -&gt;addResponse(\n                    \"200\", // JSON path `.paths[/api/v1/users/{id}].put.responses[200]`\n                    (new OA\\Operations\\Response)\n                        -&gt;setDescription(\"The user.\") // JSON path `.paths[/api/v1/users/{id}].put.responses[200].description`\n                        -&gt;addMediaType(\n                            \"application/json\",  // JSON path `.paths[/api/v1/users/{id}].put.responses[200].content[application/json]`\n                            (new OA\\Operations\\MediaType)\n                                -&gt;setSchema(\n                                    (new OA\\Operations\\Schema) // JSON path `.paths[/api/v1/users/{id}].put.responses[200].content[application/json].schema`\n                                        -&gt;setRef(\"#/components/schemas/user\") // JSON path `.paths[/api/v1/users/{id}].put.responses[200].content[application/json].schema.$ref`\n                                )\n                        )\n                )\n        )\n        -&gt;setDelete(\n            (new OA\\Operations\\Operation) // JSON path `.paths[/api/v1/users/{id}].delete`\n                -&gt;setDescription(\"Delete a user\") // JSON path `.paths[/api/v1/users/{id}].delete.description`\n                -&gt;addResponse( \n                    \"204\", // JSON path `.paths[/api/v1/users/{id}].delete.responses[204]`\n                    (new OA\\Operations\\Response)\n                        -&gt;setDescription(\"user successfully deleted (no content)\") // JSON path `.paths[/api/v1/users/{id}].delete.responses[204].description`\n                )\n        )\n    );\n</code></pre>"},{"location":"about/user_guide/#6-get-the-json-spec","title":"6. Get the JSON spec","text":"<p>Now we'll get the JSON spec for you to use.</p> MarshallingContext <p>The <code>MarshallingContext</code> is not actually doing anything yet, the intention is too allow customisation of how any object is marshalled by adding properties to this.</p> <p>Example</p> PHP<pre><code>$jsonSpec = $doc-&gt;toJson(new OA\\Spec\\MarshallingContext());\n</code></pre> <p>&lt; Back</p>"},{"location":"development_guide/","title":"Development Guide","text":"<p>Blah blah</p>"},{"location":"reference/","title":"Reference","text":""}]}